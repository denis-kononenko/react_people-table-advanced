{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/NotFoundPage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","types/SearchParams.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","types/ColumnsNames.ts","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/HomePage.tsx","Root.tsx","index.tsx"],"names":["Navbar","className","role","to","isActive","classNames","App","NotFoundPage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SearchParams","Sex","centuriesValues","PeopleFilters","setSearchParams","sex","get","isMale","m","isFemale","f","query","Query","centuries","getAll","Centuries","type","placeholder","onChange","event","setSearchWith","target","map","centure","includes","filter","c","length","Loader","PersonLink","person","pathname","slug","name","ColumnsNames","PeopleTable","people","sort","Sort","order","Order","isSortUp","sortValue","isSortDown","values","isSortButtonShown","Mother","Father","toUpperCase","slice","born","died","mother","motherName","father","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasLoadingError","setHasLoadingError","arePeopleShown","useParams","preparedPeople","newPeople","toLowerCase","String","Math","floor","a","b","Name","localeCompare","Born","Died","reverse","useEffect","getPeople","receivedPeople","find","item","fatherName","catch","finally","HomePage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"oPAGaA,EAAS,kBACpB,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEE,GAAG,IACHF,UAAW,gBAAGG,EAAH,EAAGA,SAAH,OAAkBC,IAAW,cAAe,CACrD,8BAA+BD,GADtB,EAFb,kBASA,cAAC,IAAD,CACED,GAAG,UACHF,UAAW,gBAAGG,EAAH,EAAGA,SAAH,OAAkBC,IAAW,cAAe,CACrD,8BAA+BD,GADtB,EAFb,0BAlBc,ECETE,G,MAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKL,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAKT,GCjBYM,EAAe,kBAC1B,oBAAIN,UAAU,QAAd,2BAD0B,E,6BCQrB,SAASO,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IAEvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAGIP,EAAUE,UAClB,C,oCC/BYY,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIE3B,GAAI,CACF4B,OAAQvB,EAAcsB,EAAcH,KAElCC,GAPN,aASGF,IAGN,ECnCWM,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,UAAYA,EAAZ,cAAYA,EAAZ,sBAAYA,EAAZ,YAAYA,EAAZ,cAAYA,CAAZ,MCMKC,E,SAAAA,G,OAAAA,E,MAAAA,E,MAAAA,C,EAAAA,G,IAKCC,EAAkB,CAAC,KAAM,KAAM,KAAM,KAAM,MAEpCC,EAAgB,WAC3B,MAAwCN,cAAxC,mBAAOC,EAAP,KAAqBM,EAArB,KAEMC,EAAMP,EAAaQ,IAAIN,EAAaC,KACpCM,EAASF,IAAQJ,EAAIO,EACrBC,EAAWJ,IAAQJ,EAAIS,EACvBC,EAAQb,EAAaQ,IAAIN,EAAaY,QAAU,GAChDC,EAAYf,EAAagB,OAAOd,EAAae,WAYnD,OACE,sBAAK9C,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEA,UAAWI,IAAW,CACpB,aAAckC,IAAWE,IAE3Bd,OAAQ,CAAEU,IAAK,MAJjB,iBASA,cAAC,EAAD,CACEpC,UAAWI,IAAW,CACpB,YAAakC,IAEfZ,OAAQ,CAAEU,IAAKJ,EAAIO,GAJrB,kBASA,cAAC,EAAD,CACEvC,UAAWI,IAAW,CACpB,YAAaoC,IAEfd,OAAQ,CAAEU,IAAKJ,EAAIS,GAJrB,uBAUF,qBAAKzC,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACR+C,KAAK,SACL/C,UAAU,QACVgD,YAAY,SACZC,SA5CgB,SAACC,IANL,SAACxB,GACrB,IAAMI,EAASvB,EAAcsB,EAAcH,GAE3CS,EAAgBL,EACjB,CAGCqB,CAAc,CAAET,MAAOQ,EAAME,OAAOnC,OAAS,MAC9C,EA2CSA,MAAOyB,IAGT,sBAAM1C,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACGiC,EAAgBoB,KAAI,SAAAC,GAAO,OAC1B,cAAC,EAAD,CAEE,UAAQ,UACRtD,UAAWI,IAAW,SAAU,OAAQ,CACtC,UAAWwC,EAAUW,SAASD,KAEhC5B,OAAQ,CACNkB,UAAWA,EAAUW,SAASD,GAC1BV,EAAUY,QAAO,SAAAC,GAAC,OAAIA,IAAMH,CAAV,IADX,sBAEHV,GAFG,CAEQU,KATvB,SAYGA,GAXIA,EAFmB,MAkB9B,qBAAKtD,UAAU,mBAAf,SACE,cAAC,EAAD,CACE,UAAQ,aACRA,UAAWI,IAAW,SAAU,aAAc,CAC5C,cAAoC,IAArBwC,EAAUc,SAE3BhC,OAAQ,CAAEkB,UAAW,MALvB,wBAaN,qBAAK5C,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAU,0CACV0B,OAAQ,CAAEU,IAAK,KAAMM,MAAO,KAAME,UAAW,MAF/C,mCASP,EC7HYe,G,MAAS,kBACpB,qBAAK3D,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCMT4D,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5C,EAAuBjC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,CACE3B,GAAI,CACF4D,SAAS,WAAD,OAAaD,EAAOE,MAC5BjC,OAAQD,EAAajB,YAEvBZ,UAAWI,IAAW,CACpB,kBAAkC,MAAfyD,EAAOzB,MAN9B,SASGyB,EAAOG,MAGb,ECxBWC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,YAAYA,EAAZ,UAAYA,EAAZ,YAAYA,EAAZ,YAAYA,EAAZ,gBAAYA,EAAZ,gBAAYA,CAAZ,MCaaC,EAA+B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,OAAQJ,EAAW,EAAXA,KACrD,EAAuBnC,cAAhBC,EAAP,oBACMuC,EAAOvC,EAAaQ,IAAIN,EAAasC,MACrCC,EAAQzC,EAAaQ,IAAIN,EAAawC,OActCC,EAAW,SAACC,GAAD,OAAuBL,IAASK,IAAcH,CAA9C,EACXI,EAAa,SAACD,GAAD,OAAuBL,IAASK,GAAaH,CAA7C,EAEnB,OACE,wBACE,UAAQ,cACRtE,UAAU,uDAFZ,UAIE,gCACE,6BACGa,OAAO8D,OAAOV,GAAcZ,KAAI,SAAAW,GAC/B,IAvBaS,EAuBPG,EACFZ,IAASC,EAAaY,QAAUb,IAASC,EAAaa,OAE1D,OACE,6BACE,uBAAM9E,UAAU,8BAAhB,UACGgE,EAAK,GAAGe,cAAgBf,EAAKgB,MAAM,GACnCJ,GACC,cAAC,EAAD,CACElD,QAhCG+C,EAgCmBT,EA/BpCI,IAASK,EACJ,CAAEL,KAAMK,EAAWH,MAAO,MAG9BA,EAIE,CAAEF,KAAM,KAAME,MAAO,MAHnB,CAAEF,KAAMK,EAAWH,MAAO,SAyBnB,SAGE,sBAAMtE,UAAU,OAAhB,SACE,mBACEA,UAAWI,IAAW,MAAO,UAAW,CACtC,aAAcoE,EAASR,GACvB,eAAgBU,EAAWV,eAXhCA,EAoBZ,QAIL,gCACGG,EAAOd,KAAI,SAAAQ,GACV,OACE,qBAEE,UAAQ,SACR7D,UAAWI,IAAW,CACpB,yBAA0ByD,EAAOE,OAASA,IAJ9C,UAOE,6BACE,cAAC,EAAD,CAAYF,OAAQA,MAGtB,6BAAKA,EAAOzB,MACZ,6BAAKyB,EAAOoB,OACZ,6BAAKpB,EAAOqB,OACZ,6BACGrB,EAAOsB,OACN,cAAC,EAAD,CAAYtB,OAAQA,EAAOsB,SAE3BtB,EAAOuB,YAAc,MAGzB,6BACGvB,EAAOwB,OACN,cAAC,EAAD,CAAYxB,OAAQA,EAAOwB,SAE3BxB,EAAOuB,YAAc,QAxBpBvB,EAAOE,KA6BjB,QAIR,E,cCvGKuB,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCCA,IAAMC,EAAa,WACxB,MAA4BC,mBAAmB,IAA/C,mBAAO9B,EAAP,KAAe+B,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KACMC,GAAkBJ,IAAcE,EAE9BtC,EAASyC,cAATzC,KAER,EAAuBnC,cAAhBC,EAAP,oBAEMO,EAAMP,EAAaQ,IAAIN,EAAaC,KACpCU,EAAQb,EAAaQ,IAAIN,EAAaY,QAAU,GAChDC,EAAYf,EAAagB,OAAOd,EAAae,WAC7CsB,EAAOvC,EAAaQ,IAAIN,EAAasC,MACrCC,EAAQzC,EAAaQ,IAAIN,EAAawC,OAEtCkC,EAAkB,WACtB,IAAIC,EAAS,YAAOvC,GAqCpB,OAnCI/B,GAAOM,GAASE,EAAUc,OAAS,KACrCgD,EAAYvC,EAAOX,QAAO,SAAAK,GACxB,OAAOA,EAAOG,KAAK2C,cAAcpD,SAASb,EAAMiE,kBAC1CvE,GAAMyB,EAAOzB,MAAQA,OACrBQ,EAAUc,OAAS,IACnBd,EAAUW,SAASqD,OAAOC,KAAKC,MAAMjD,EAAOoB,KAAO,OAE1D,KAGCb,GACFsC,EAAUtC,MAAK,SAAC2C,EAAGC,GACjB,OAAQ5C,GACN,KAAKH,EAAagD,KAChB,OAAOF,EAAE/C,KAAKkD,cAAcF,EAAEhD,MAEhC,KAAKC,EAAajC,IAChB,OAAO+E,EAAE3E,IAAI8E,cAAcF,EAAE5E,KAE/B,KAAK6B,EAAakD,KAChB,OAAOJ,EAAE9B,KAAO+B,EAAE/B,KAEpB,KAAKhB,EAAamD,KAChB,OAAOL,EAAE7B,KAAO8B,EAAE9B,KAEpB,QACE,OAAO,EAEZ,IAGCZ,GACFoC,EAAUW,UAGLX,CACR,CAvCuB,GA2DxB,OAlBAY,qBAAU,YD1DL,WAAP,gCC2DIC,GACG3B,MAAK,SAAA4B,GACJlB,GAAmB,GACnBJ,EAAUsB,EAAenE,KAAI,SAAAQ,GAC3B,IAAMsB,EAASqC,EACZC,MAAK,SAAAC,GAAI,OAAIA,EAAK1D,OAASH,EAAOuB,UAAzB,IAENC,EAASmC,EACZC,MAAK,SAAAC,GAAI,OAAIA,EAAK1D,OAASH,EAAO8D,UAAzB,IAEZ,OAAO,2BAAK9D,GAAZ,IAAoBsB,SAAQE,UAC7B,IACF,IACAuC,OAAM,kBAAMtB,GAAmB,EAAzB,IACNuB,SAAQ,kBAAMzB,GAAa,EAAnB,GACZ,GAAE,IAGD,qCACE,oBAAIpG,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGmG,GAAa,cAAC,EAAD,KAEZA,GAAaE,GACb,mBAAG,UAAQ,qBAAqBrG,UAAU,kBAA1C,kCAKDuG,GAAoC,IAAlBpC,EAAOT,QACxB,mBAAG,UAAQ,kBAAX,+CAKD6C,GAAoC,IAAlBpC,EAAOT,SACxB+C,EAAe/C,OAAS,EACtB,cAAC,EAAD,CAAaS,OAAQsC,EAAgB1C,KAAMA,IAE3C,sGAWjB,EC9HY+D,EAAW,kBACtB,oBAAI9H,UAAU,QAAd,sBADsB,ECWX+H,EAAO,kBAClB,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAU/H,GAAG,IAAIiI,SAAO,MACpD,cAAC,IAAD,CAAOH,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,IAA9B,SACE,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,cARnB,E,YCLpBG,qBAAWC,SAASC,eAAe,SAChCC,OAAO,cAAC,EAAD,I","file":"static/js/main.cab7a427.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink\n          to=\"/\"\n          className={({ isActive }) => classNames('navbar-item', {\n            'has-background-grey-lighter': isActive,\n          })}\n        >\n          Home\n        </NavLink>\n\n        <NavLink\n          to=\"/people\"\n          className={({ isActive }) => classNames('navbar-item', {\n            'has-background-grey-lighter': isActive,\n          })}\n        >\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SearchParams {\n  Sex = 'sex',\n  Query = 'query',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../types/SearchParams';\n\nenum Sex {\n  m = 'm',\n  f = 'f',\n}\n\nconst centuriesValues = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get(SearchParams.Sex);\n  const isMale = sex === Sex.m;\n  const isFemale = sex === Sex.f;\n  const query = searchParams.get(SearchParams.Query) || '';\n  const centuries = searchParams.getAll(SearchParams.Centuries);\n\n  const setSearchWith = (params: any) => {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchWith({ query: event.target.value || null });\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': !isMale && !isFemale,\n          })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': isMale,\n          })}\n          params={{ sex: Sex.m }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': isFemale,\n          })}\n          params={{ sex: Sex.f }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQueryChange}\n            value={query}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesValues.map(centure => (\n              <SearchLink\n                key={centure}\n                data-cy=\"century\"\n                className={classNames('button', 'mr-1', {\n                  'is-info': centuries.includes(centure),\n                })}\n                params={{\n                  centuries: centuries.includes(centure)\n                    ? centuries.filter(c => c !== centure)\n                    : [...centuries, centure],\n                }}\n              >\n                {centure}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button', 'is-success', {\n                'is-outlined': centuries.length !== 0,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ sex: null, query: null, centuries: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${person.slug}`,\n        search: searchParams.toString(),\n      }}\n      className={classNames({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","export enum ColumnsNames {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n  Mother = 'mother',\n  Father = 'father',\n}\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\nimport { ColumnsNames } from '../types/ColumnsNames';\nimport { SearchParams } from '../types/SearchParams';\n\ntype Props = {\n  people: Person[],\n  slug: string | undefined,\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, slug }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get(SearchParams.Sort);\n  const order = searchParams.get(SearchParams.Order);\n\n  const setSortParams = (sortValue: string) => {\n    if (sort !== sortValue) {\n      return { sort: sortValue, order: null };\n    }\n\n    if (!order) {\n      return { sort: sortValue, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  const isSortUp = (sortValue: string) => sort === sortValue && !order;\n  const isSortDown = (sortValue: string) => sort === sortValue && order;\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.values(ColumnsNames).map(name => {\n            const isSortButtonShown\n              = name !== ColumnsNames.Mother && name !== ColumnsNames.Father;\n\n            return (\n              <th key={name}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {name[0].toUpperCase() + name.slice(1)}\n                  {isSortButtonShown && (\n                    <SearchLink\n                      params={setSortParams(name)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('fas', 'fa-sort', {\n                            'fa-sort-up': isSortUp(name),\n                            'fa-sort-down': isSortDown(name),\n                          })}\n                        />\n                      </span>\n                    </SearchLink>\n                  )}\n                </span>\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          return (\n            <tr\n              key={person.slug}\n              data-cy=\"person\"\n              className={classNames({\n                'has-background-warning': person.slug === slug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {person.mother ? (\n                  <PersonLink person={person.mother} />\n                ) : (\n                  person.motherName || '-'\n                )}\n              </td>\n              <td>\n                {person.father ? (\n                  <PersonLink person={person.father} />\n                ) : (\n                  person.motherName || '-'\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { ColumnsNames } from '../types/ColumnsNames';\nimport { SearchParams } from '../types/SearchParams';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const arePeopleShown = !isLoading && !hasLoadingError;\n\n  const { slug } = useParams();\n\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get(SearchParams.Sex);\n  const query = searchParams.get(SearchParams.Query) || '';\n  const centuries = searchParams.getAll(SearchParams.Centuries);\n  const sort = searchParams.get(SearchParams.Sort);\n  const order = searchParams.get(SearchParams.Order);\n\n  const preparedPeople = (() => {\n    let newPeople = [...people];\n\n    if (sex || query || centuries.length > 0) {\n      newPeople = people.filter(person => {\n        return person.name.toLowerCase().includes(query.toLowerCase())\n          && (sex ? person.sex === sex : true)\n          && (centuries.length > 0\n            ? centuries.includes(String(Math.floor(person.born / 100)))\n            : true);\n      });\n    }\n\n    if (sort) {\n      newPeople.sort((a, b) => {\n        switch (sort) {\n          case ColumnsNames.Name:\n            return a.name.localeCompare(b.name);\n\n          case ColumnsNames.Sex:\n            return a.sex.localeCompare(b.sex);\n\n          case ColumnsNames.Born:\n            return a.born - b.born;\n\n          case ColumnsNames.Died:\n            return a.died - b.died;\n\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order) {\n      newPeople.reverse();\n    }\n\n    return newPeople;\n  })();\n\n  useEffect(() => {\n    getPeople()\n      .then(receivedPeople => {\n        setHasLoadingError(false);\n        setPeople(receivedPeople.map(person => {\n          const mother = receivedPeople\n            .find(item => item.name === person.motherName);\n\n          const father = receivedPeople\n            .find(item => item.name === person.fatherName);\n\n          return { ...person, mother, father };\n        }));\n      })\n      .catch(() => setHasLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {!isLoading && hasLoadingError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {arePeopleShown && people.length === 0 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {arePeopleShown && people.length !== 0 && (\n                preparedPeople.length > 0 ? (\n                  <PeopleTable people={preparedPeople} slug={slug} />\n                ) : (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { HomePage } from './components/HomePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport { Root } from './Root';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}